package view;

import control.CADInfo;
import java.awt.Component;
import java.lang.*;
import java.sql.*;
import java.sql.ResultSet;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import model.DBConnection;
import static view.Reg.gender;
import java.text.SimpleDateFormat;


/**
 *
 * @author User
 */
public class ADInfo extends javax.swing.JFrame {
Connection con;

SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
    public ADInfo() {
        initComponents();
        
        String url="jdbc:mysql://localhost/life";
        String user="root";
        String pass="";
        
        try{
            con=DriverManager.getConnection(url,user,pass);
        }
        catch(Exception e){
            System.err.println("Error : "+e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtE = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtN = new javax.swing.JTextField();
        txtU = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        rM = new javax.swing.JRadioButton();
        rF = new javax.swing.JRadioButton();
        cB = new javax.swing.JComboBox<>();
        txtP = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        date_of_birth = new com.toedter.calendar.JDateChooser();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(txtE, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 160, 390, 36));

        jLabel2.setFont(new java.awt.Font("Stencil", 0, 22)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("User ID");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 110, -1, 36));
        getContentPane().add(txtN, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 210, 390, 36));

        txtU.setEditable(false);
        getContentPane().add(txtU, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 110, 390, 36));

        jTable1.setFont(new java.awt.Font("Serif", 1, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "User ID", "Email", "Name ", "Gender", "DOB", "Blood Type", "Password"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(583, 129, 652, 476));

        jLabel1.setFont(new java.awt.Font("Stencil", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Email");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 160, -1, 50));

        jLabel6.setFont(new java.awt.Font("Stencil", 0, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Name");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 220, -1, -1));

        jLabel3.setFont(new java.awt.Font("Stencil", 0, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Gender");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 270, -1, -1));

        jLabel4.setFont(new java.awt.Font("Stencil", 0, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Date of birth");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 320, -1, 33));

        jLabel5.setFont(new java.awt.Font("Stencil", 0, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Blood Group");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 390, -1, -1));

        jLabel7.setFont(new java.awt.Font("Stencil", 0, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Password");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 440, 124, -1));

        rM.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        rM.setForeground(new java.awt.Color(255, 255, 255));
        rM.setText("Male");
        rM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rMActionPerformed(evt);
            }
        });
        getContentPane().add(rM, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 260, 108, -1));

        rF.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        rF.setForeground(new java.awt.Color(255, 255, 255));
        rF.setText("Female");
        rF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rFActionPerformed(evt);
            }
        });
        getContentPane().add(rF, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 260, 108, -1));

        cB.setFont(new java.awt.Font("Stencil", 0, 14)); // NOI18N
        cB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<Blood Group>", "A+", "A-", "B+", "B-", "O+", "O-", "AB+", "AB-" }));
        cB.setToolTipText("");
        cB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cBActionPerformed(evt);
            }
        });
        getContentPane().add(cB, new org.netbeans.lib.awtextra.AbsoluteConstraints(241, 389, 196, 32));

        txtP.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        getContentPane().add(txtP, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 430, 330, 45));

        btnUpdate.setFont(new java.awt.Font("Serif", 3, 18)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(255, 51, 51));
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        getContentPane().add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(124, 490, 130, 44));

        btnAdd.setFont(new java.awt.Font("Serif", 3, 18)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(255, 51, 51));
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        getContentPane().add(btnAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 490, 124, 44));

        jButton3.setFont(new java.awt.Font("Serif", 3, 18)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 51, 51));
        jButton3.setText("Clear");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 550, 124, 44));

        btnBack.setFont(new java.awt.Font("Serif", 3, 18)); // NOI18N
        btnBack.setForeground(new java.awt.Color(255, 51, 51));
        btnBack.setText("<<<Back to Menu");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        getContentPane().add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(118, 551, 297, 44));

        jButton5.setFont(new java.awt.Font("Serif", 3, 18)); // NOI18N
        jButton5.setForeground(new java.awt.Color(255, 51, 51));
        jButton5.setText("Refresh");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 490, 124, 44));
        getContentPane().add(date_of_birth, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 320, 300, 30));

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DInfo.png"))); // NOI18N
        jLabel8.setText("jLabel8");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(-3, 0, 1270, 610));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cBActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        this.setVisible(false);
        new AHome().setVisible(true);
    }//GEN-LAST:event_btnBackActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        String sql="SELECT * FROM user";
        
        try{
            PreparedStatement pst=con.prepareStatement(sql);
            ResultSet rs=pst.executeQuery();
            DefaultTableModel model= (DefaultTableModel)jTable1.getModel();
            model.setRowCount(0);
            while(rs.next()){
                model.addRow(new String[]{rs.getString(1),rs.getString(2),rs.getString(3),rs.getString(4),rs.getString(5),rs.getString(6),rs.getString(7)});
            }
        }
        catch(Exception e){
            System.err.println("Error : "+e.getMessage());
        }
            txtU.setText("");
            txtE.setText("");
            txtN.setText("");
            rM.setSelected(false);
            rF.setSelected(false);
            date_of_birth.setDate(null);
            cB.setSelectedIndex(0);
            txtP.setText("");
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        DefaultTableModel model= (DefaultTableModel)jTable1.getModel();
        model.setRowCount(0);
        model.setRowCount(0);
        
        txtU.setText("");
        txtN.setText("");
        txtE.setText("");
        date_of_birth.setDate(null);
        txtP.setText("");
        rM.setSelected(false);
        rF.setSelected(false);
        cB.setSelectedIndex(0);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
      try {
        int i = jTable1.getSelectedRow();
        TableModel m1 = jTable1.getModel();
        txtU.setText(m1.getValueAt(i, 0).toString());
        txtE.setText(m1.getValueAt(i, 1).toString());
        txtN.setText(m1.getValueAt(i, 2).toString());
        gender = m1.getValueAt(i, 3).toString();

        if (gender.equals("Male")) {
            rM.setSelected(true);
            rF.setSelected(false);
        } else if (gender.equals("Female")) {
            rF.setSelected(true);
            rM.setSelected(false);
        }

        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

        // Get the date from the 4th column (assuming it's a valid date string)
        String dateFromColumn = m1.getValueAt(i, 4).toString();

        // Parse the date string to java.util.Date
        java.util.Date selectedDateUtil = dateFormat.parse(dateFromColumn);

        if (selectedDateUtil != null) {
            java.sql.Date selectedDateSql = new java.sql.Date(selectedDateUtil.getTime());
            date_of_birth.setDate(selectedDateSql);

            String blood_type = m1.getValueAt(i, 5).toString();
            switch (blood_type) {
                case "A+":
                    cB.setSelectedIndex(1);
                    break;
                case "A-":
                    cB.setSelectedIndex(2);
                    break;
                case "B+":
                    cB.setSelectedIndex(3);
                    break;
                case "B-":
                    cB.setSelectedIndex(4);
                    break;
                case "O+":
                    cB.setSelectedIndex(5);
                    break;
                case "O-":
                    cB.setSelectedIndex(6);
                    break;
                case "AB+":
                    cB.setSelectedIndex(7);
                    break;
                case "AB-":
                    cB.setSelectedIndex(8);
                    break;
                default:
                    cB.setSelectedIndex(0); // Set a default index if none of the cases match
                    break;
            }

            txtP.setText(m1.getValueAt(i, 6).toString());
        } else {
            // Handle the case where the date is null
            JOptionPane.showMessageDialog(null, "Date must not be null");
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, e.getMessage());
    }
    }//GEN-LAST:event_jTable1MouseClicked

    private void rMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rMActionPerformed
        gender = "Male";
        rF.setSelected(false);
    }//GEN-LAST:event_rMActionPerformed

    private void rFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rFActionPerformed
        gender = "Female";
        rM.setSelected(false);
    }//GEN-LAST:event_rFActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
       String email, name, dob, pass, repass;
    try {
    email = txtE.getText().trim();
    Component frame = null;

    // Check if the email is empty
    if (email.isEmpty()) {
        JOptionPane.showMessageDialog(frame, "Email is required", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Regular expression for a simple email format validation
    String emailRegex = "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,7}$";
    Pattern pattern = Pattern.compile(emailRegex);
    Matcher matcher = pattern.matcher(email);

    
    String fullName = txtN.getText().trim();

    // Regular expression for letters-only validation
    String lettersOnlyRegex = "^[a-zA-Z]+$";
    if (!fullName.matches(lettersOnlyRegex)) {
        JOptionPane.showMessageDialog(new JFrame(), "Full Name should contain only letters", "Error", JOptionPane.ERROR_MESSAGE);
        // You might want to clear the text field or take appropriate action here
    } 
    else if (!matcher.matches()) {
        JOptionPane.showMessageDialog(frame, "Invalid email format", "Error", JOptionPane.ERROR_MESSAGE);
    }else if ("".equals(txtE.getText())) {
        JOptionPane.showMessageDialog(new JFrame(), "Email is required", "Error", JOptionPane.ERROR_MESSAGE);
    } else if ("".equals(txtN.getText())) {
        JOptionPane.showMessageDialog(new JFrame(), "Full Name is required", "Error", JOptionPane.ERROR_MESSAGE);
    } else if (!(rM.isSelected() || rF.isSelected())) {
        // No gender selected, show an error message
        JOptionPane.showMessageDialog(new JFrame(), "Please select a gender", "Error", JOptionPane.ERROR_MESSAGE);
    } else if (cB.getSelectedIndex() == -1 || cB.getSelectedIndex() == 0) {
        // No blood type selected, show an error message
        JOptionPane.showMessageDialog(new JFrame(), "Please select your Blood", "Error", JOptionPane.ERROR_MESSAGE);
    } else if ("".equals(txtP.getText())) {
        JOptionPane.showMessageDialog(new JFrame(), "Provide your password!!!", "Error", JOptionPane.ERROR_MESSAGE);
    }

    String query = "INSERT INTO user(email, name, gender, dob, blood_group, pass) VALUES(?, ?, ?, ?, ?, ?)";
    PreparedStatement preparedStatement = DBConnection.getMyConnection().prepareStatement(query);
    preparedStatement.setString(1, txtE.getText());
    preparedStatement.setString(2, txtN.getText());
    preparedStatement.setString(3, gender);

    // Convert the util.Date to sql.Date
    if (date_of_birth.getDate() != null) {
        java.util.Date selectedDateUtil = date_of_birth.getDate();
        java.sql.Date selectedDateSql = new java.sql.Date(selectedDateUtil.getTime());
        preparedStatement.setDate(4, selectedDateSql);
    } else {
        // Handle the case where the date is null
        JOptionPane.showMessageDialog(null, "Date must not be null");
        return;
    }

    preparedStatement.setString(5, cB.getSelectedItem().toString());
    preparedStatement.setString(6, txtP.getText());

    int rowsAffected = preparedStatement.executeUpdate();

    // Clear form fields
    if (rowsAffected > 0) {
        txtE.setText("");
        txtN.setText("");
        rM.setSelected(false);
        rF.setSelected(false);
        date_of_birth.setDate(null);
        cB.setSelectedIndex(0);
        txtP.setText("");

        JOptionPane.showMessageDialog(null, "New account has been created successfully!");
    } else {
        JOptionPane.showMessageDialog(new JFrame(), "Error in database operation", "Error", JOptionPane.ERROR_MESSAGE);
    }

    } catch (SQLException e) {
      // Handle SQL exception
     e.printStackTrace();
     JOptionPane.showMessageDialog(new JFrame(), e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } catch (Exception e) {
    System.out.println("Error! " + e.getMessage());
    JOptionPane.showMessageDialog(new JFrame(),"Error is "+e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
   }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
     try {
    String email = txtE.getText().trim();
    Component frame = null;

    // Check if the email is empty
    if (email.isEmpty()) {
        JOptionPane.showMessageDialog(frame, "Email is required", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Regular expression for a simple email format validation
    String emailRegex = "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,7}$";
    Pattern pattern = Pattern.compile(emailRegex);
    Matcher matcher = pattern.matcher(email);
    
     String fullName = txtN.getText().trim();

        //  Regular expression for letters-only validation
        String lettersOnlyRegex = "^[a-zA-Z\\s]+$";
        if (!matcher.matches()) {
        JOptionPane.showMessageDialog(frame, "Invalid email format", "Error", JOptionPane.ERROR_MESSAGE);
        }
        else if (!fullName.matches(lettersOnlyRegex)) {
        JOptionPane.showMessageDialog(new JFrame(), "Full Name should contain only letters", "Error", JOptionPane.ERROR_MESSAGE);
        // You might want to clear the text field or take appropriate action here
    }
        else if ("".equals(txtE.getText())) {
        JOptionPane.showMessageDialog(new JFrame(), "Email is required", "Error", JOptionPane.ERROR_MESSAGE);
        
    } else if ("".equals(txtN.getText())) {
        JOptionPane.showMessageDialog(new JFrame(), "Full Name is required", "Error", JOptionPane.ERROR_MESSAGE);
        
    } else if (!(rM.isSelected() || rF.isSelected())) {
        // No gender selected, show an error message
        JOptionPane.showMessageDialog(new JFrame(), "Please select a gender", "Error", JOptionPane.ERROR_MESSAGE);
        
    } else if (cB.getSelectedIndex() == -1 || cB.getSelectedIndex() == 0) {
        // No blood type selected, show an error message
        JOptionPane.showMessageDialog(new JFrame(), "Please select your Blood", "Error", JOptionPane.ERROR_MESSAGE);
    } else if ("".equals(txtP.getText())) {
        JOptionPane.showMessageDialog(new JFrame(), "Provide your password!!!", "Error", JOptionPane.ERROR_MESSAGE);
    }

    int user_id = Integer.parseInt(txtU.getText());
    email = txtE.getText();
    String name = txtN.getText();
    String blood_group = (String) cB.getSelectedItem();

    String dob = null;
    if (date_of_birth.getDate() != null) {
        java.util.Date selectedDateUtil = date_of_birth.getDate();
        java.sql.Date selectedDateSql = new java.sql.Date(selectedDateUtil.getTime());
        dob = selectedDateSql.toString();
    } else {
        // Handle the case where the date is null
        JOptionPane.showMessageDialog(null, "Date must not be null");
    }

    String pass = txtP.getText();

    CADInfo cup = new CADInfo();
    cup.updateUser(user_id, email, name, gender, dob, blood_group, pass);
      } catch (SQLException ex) {
            JOptionPane.showMessageDialog(new JFrame(), ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(rootPane, ex.getMessage());
        }

    }//GEN-LAST:event_btnUpdateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ADInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ADInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ADInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ADInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ADInfo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cB;
    private com.toedter.calendar.JDateChooser date_of_birth;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JRadioButton rF;
    private javax.swing.JRadioButton rM;
    private javax.swing.JTextField txtE;
    private javax.swing.JTextField txtN;
    private javax.swing.JTextField txtP;
    private javax.swing.JTextField txtU;
    // End of variables declaration//GEN-END:variables

    private JTextField setText(String toString) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
